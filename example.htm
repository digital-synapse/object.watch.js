<html>
<head></head>
<body onload="onload()">

<pre id='console'>
</pre>

<script src="object.watch.js"></script>
<script>
    var console = function () {
        return ({
            log: function (msg) {
                consoleDiv = document.getElementById('console');
                text = document.createTextNode(msg + '\n');
                consoleDiv.appendChild(text);
            }
        });
    } ();

    /**************************************** test **************************************/
    function onload() {
        var watchCallback = function (prop) {
            console.log('[' + prop + '] changed to ' + this[prop]);
        };
        
        // some things to test 
        var array = [
            1,
            { a: 2 },
            { a: { b: { c: 1}} }
        ];
        var someobject = {
            a: 1,
            b: 2.2,
            c: 'c',
            d: { x: 1 },
            e: [0],
            super_nested: { a: { b: { c: { d: { e: { f: { g: [0, { h: 0 }, 2]}}}}}} }
        };
        

        console.log("object.watch no traversal (shallow):\n");
        someobject.watch({
            onChange: watchCallback
        });


        someobject.c=9;  // triggers callback
        someobject.e[0] =9; // does not trigger callback (array watch disabled by default)
        someobject.d.x = 9;  // does not trigger (nested object watch disabled by default)


        console.log("\nobject.watch full traversal (deep):\n");
        someobject.watch({
            onChange: watchCallback,
            depth:-1,
            traverseArrays:true,
            watchArrays:true,
            watchProps:true
        });

        someobject.b = 2.2; // no change
        someobject.a = 0;
        someobject.b = 'b';
        someobject.c = 3;
        someobject.d.x = 2;
        someobject.e[0] = 3;
        someobject.super_nested.a.b.c.d.e.f.g[1].h += 1;

        console.log("\nobject.watch unwatch:\n");
        someobject.unwatch();

        someobject.a += 1; // will not trigger because is not being watched


        console.log("\nobject.watch reject changes:\n");
        someobject.watch({
            onChange: function (prop, val, oldval) {
                if (prop == 'a' && val > 5) return oldval;
            }
        });
        someobject.a = 5; // this will set 5
        someobject.a = 6; // this will set 5 also
        console.log('[a] changed to ' + someobject.a);


        console.log("\nobject.watch partial traversal:\n");
        someobject.watch({
            onChange: watchCallback,
            depth: 1,
            traverseArrays: true,
            watchArrays: true,
            watchProps: true
        });
        someobject.d.x += 1; // this works
        someobject.super_nested.a.b.c.d.e.f.g[1].h += 1; // not this (too deep)


        // works for individual properties 
        console.log("\nobject.watch single property:\n");
        someobject.watch({
            onChange: watchCallback,
            toWatch: 'a',
            depth:0
        });

        someobject.a = 5;

        /* Works on arrays also */
        console.log("\nobject.watch arrays:\n");
        array.watch({
            onChange: watchCallback,
            traverseArrays: true,
            watchArrays: true,
            depth:-1
        });
        array[0] = 5;
        array[1].a = 5;
        array[2].a.b.c = 5;


    };
</script>
</body>
</html>
